*&---------------------------------------------------------------------*
*& Include          ZASDR0010_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form INIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT .
  P_UPLOAD = '필요한 정보를 선택 후 업로드 할 수 있습니다.'.


  DATA : LV_TEST TYPE TABLE OF ZAASV0010_EX WITH HEADER LINE.

  "나중에 지우기
*  SELECT *
*    INTO LV_TEST
*    FROM ZAASV0010_EX.
*
*   APPEND LV_TEST.
*  ENDSELECT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY_SCREEN
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY_SCREEN .

  LOOP AT SCREEN.
    IF  SCREEN-NAME = 'P_UPLOAD'.
      SCREEN-INPUT = '0'.
      MODIFY SCREEN.
    ENDIF.

    CASE SCREEN-GROUP1.
      WHEN 'MD2'.
        IF P_MATER EQ ABAP_TRUE.
          SCREEN-ACTIVE = '1'. " 1 : 화면에 나타나겠다 :,쓰겠다
        ELSE.
          SCREEN-ACTIVE = '0'.  " 화면에서 사라지게하겠다.
        ENDIF.
        MODIFY SCREEN.

      WHEN 'MD3'.
        IF P_HOUSE EQ ABAP_TRUE.
          SCREEN-ACTIVE = '1'. " 1 : 화면에 나타나겠다 :,쓰겠다
        ELSE.
          SCREEN-ACTIVE = '0'.  " 화면에서 사라지게하겠다.
        ENDIF.
        MODIFY SCREEN.

      WHEN 'MD4'.
        IF P_BOM EQ ABAP_TRUE.
          SCREEN-ACTIVE = '1'. " 1 : 화면에 나타나겠다 :,쓰겠다
        ELSE.
          SCREEN-ACTIVE = '0'.  " 화면에서 사라지게하겠다.
        ENDIF.
        MODIFY SCREEN.

      WHEN 'MD5'.
        IF P_INSTAL EQ ABAP_TRUE.
          SCREEN-ACTIVE = '1'. " 1 : 화면에 나타나겠다 :,쓰겠다
        ELSE.
          SCREEN-ACTIVE = '0'.  " 화면에서 사라지게하겠다.
        ENDIF.
        MODIFY SCREEN.

      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form F4_FILE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- P_MLOAD
*&---------------------------------------------------------------------*
FORM F4_FILE  CHANGING PV_FILE.


* - PREFIX 정의 - FORM PARAMETER
*   1. PT_  : Internal Table or Ranges
*   2. PS_  : Structure
*   3. PV_  : Variables
*   4. PR_ : Reference Variables

  DATA: LT_FILE_TABLE TYPE FILETABLE,
        "테이블 타입은 테이블을 만들때 타입을 사용해서 할 수 있음.
        "스트럭처를 사용해서 테이블을 만들때도 스트럭처에서 테이블타입을 만든 다음에 테이블을 만드는 형식
        LS_FIEL_TABLE TYPE FILE_TABLE.

  DATA: LV_SUBRC  TYPE I,
        LV_ACTION TYPE I.

  CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG "창을 띄우는 것.
    EXPORTING
      WINDOW_TITLE            = 'File Path' "윈도우  이름.
      DEFAULT_FILENAME        = ''
      FILE_FILTER             =
                                'Excel files (*.XLSX)|*.XLSX| Excel files (*.XLS)|*.XLS| '
      "파일 형식, 지금은 엑셀
*      Excel files (*.XLS)|*.XLS| Excel files (*.XLSX)|*.XLSX|'
      INITIAL_DIRECTORY       = 'C:\' "처음 뜨는 폴더
      MULTISELECTION          = ' ' "중복 올리기
    CHANGING
      FILE_TABLE              = LT_FILE_TABLE "선택한 파일 경로 이름
      RC                      = LV_SUBRC     "에러가 맞냐 아니냐
      USER_ACTION             = LV_ACTION    "열기 취소버튼
      "                  우리가 받을 값들.
    EXCEPTIONS
      FILE_OPEN_DIALOG_FAILED = 1 "오류들 정의
      CNTL_ERROR              = 2
      ERROR_NO_GUI            = 3.   "창 띄우는 것.

  CALL METHOD CL_GUI_CFW=>FLUSH.

  CASE LV_ACTION. "  OK면 0, 캔슬이면 9.

    WHEN  CL_GUI_FRONTEND_SERVICES=>ACTION_OK. "OK를 눌렀나, 캔슬을 눌렀나

      READ TABLE LT_FILE_TABLE INDEX 1 INTO LS_FIEL_TABLE.
      PV_FILE = LS_FIEL_TABLE.

    WHEN CL_GUI_FRONTEND_SERVICES=>ACTION_CANCEL.
      EXIT.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form POPUP_TO_CONFIRM
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> TEXT_PT1
*&      --> TEXT_QT1
*&---------------------------------------------------------------------*
FORM POPUP_TO_CONFIRM  USING PV_TITLE PV_QUEST.


  "-- call popup
  CALL FUNCTION 'POPUP_TO_CONFIRM' "팝업만드는 펑션
    EXPORTING
      TITLEBAR       = PV_TITLE "TEXT-PT1
*     DIAGNOSE_OBJECT             = ' '
      TEXT_QUESTION  = PV_QUEST "TEXT-QT1
*     TEXT_BUTTON_1  = 'Ja'(001)
*     ICON_BUTTON_1  = ' '
*     TEXT_BUTTON_2  = 'Nein'(002)
*     ICON_BUTTON_2  = ' '
*     DEFAULT_BUTTON = '1'
*     DISPLAY_CANCEL_BUTTON       = 'X'
*     USERDEFINED_F1_HELP         = ' '
*     START_COLUMN   = 25
*     START_ROW      = 6
*     POPUP_TYPE     =
*     IV_QUICKINFO_BUTTON_1       = ' '
*     IV_QUICKINFO_BUTTON_2       = ' '
    IMPORTING
      ANSWER         = GV_ANSWER
*   TABLES
*     PARAMETER      =
    EXCEPTIONS
      TEXT_NOT_FOUND = 1
      OTHERS         = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form M_EXCEL_UPLOAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM M_EXCEL_UPLOAD .

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE' "엑셀의 내용을 가져오는 펑션
    EXPORTING
      FILENAME                = P_MLOAD
      I_BEGIN_COL             = 1         "Excel file start col     "엑셀은 컬럼과 로우로 되어 있음.
      I_BEGIN_ROW             = 2         "Excel file start row  " 시작하는 세로값, 첫번째는 필드가 나오기 때문에
      I_END_COL               = 100                                       "오른쪽으로 100번째 까지
      I_END_ROW               = 50000                                 "세로로 50000번째 까지 가져옴.
    TABLES
      INTERN                  = GT_INTERN                            "엑셀에서 읽은 데이터를 인터널 테이블로 가져옴
      "ROW COL VALUE식으로 이루어져 있음. 값은 읽는 형태
    EXCEPTIONS
      INCONSISTENT_PARAMETERS = 1 "0이 아닌 값들을 정의 예외처리
      UPLOAD_OLE              = 2
      OTHERS                  = 3.

  IF P_MLOAD ='C:\'. "가져온 개수가 0이냐? 데이터가 없냐?
    MESSAGE S012 DISPLAY LIKE 'E'. " 만들어진 데이터가 없음.
    GV_ERROR = ABAP_TRUE. " 에러라고 찍어줌
    EXIT.
  ENDIF.


*  IF SY-SUBRC <> 0. "not equel
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*  "스텐다드 메세지, 굳이 없어도 됨.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_IT_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_IT_DATA .

  DESCRIBE TABLE GT_INTERN LINES SY-TFILL. "인터널 테이블의 데이터 건수를 읽음. 시스템 변수, 인터널 테이블의 로우 개수
  "현재 개수는 20, 값들을 하나씩 들고옴.

  IF SY-TFILL EQ 0. "가져온 개수가 0이냐? 데이터가 없냐?
    MESSAGE S011 DISPLAY LIKE 'E'. " 만들어진 데이터가 없음.
    GV_ERROR = ABAP_TRUE. " 에러라고 찍어줌
    EXIT.
  ELSE.
  ENDIF.

*-- Excel file -> itab
  IF P_MATER = ABAP_TRUE.
    PERFORM MATER_EXCEL_TO_ITAB.

  ELSEIF P_HOUSE = ABAP_TRUE.
    PERFORM HOUSE_EXCEL_TO_ITAB.

  ELSEIF P_BOM = ABAP_TRUE.
    PERFORM BOM_EXCEL_TO_ITAB.

  ELSEIF P_INSTAL = ABAP_TRUE.
    PERFORM INSTALL_EXCEL_TO_ITAB.

  ELSE.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form MATER_EXCEL_TO_ITAB
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MATER_EXCEL_TO_ITAB .

  FIELD-SYMBOLS: <FS_COL>.

  CLEAR: GS_MDATA, GT_MDATA.

  LOOP AT GT_INTERN.

*    ADD 1 TO GT_INTERN-COL.

    ASSIGN COMPONENT GT_INTERN-COL OF STRUCTURE "INTERN-COL 필드의 순서를 의미함. GT_DATA의 1, 2, 3, 4번째  필드
                                   GS_MDATA TO <FS_COL>. "

    <FS_COL> = GT_INTERN-VALUE.
    "t_data-zyear = GT_INTERN-VALUE. 컬럼값이 2가 됨.

    AT END OF ROW. "ROW라는 필드가 끝날 때(반복되는 것이 끝날 때) 로우의 값이 바뀌기 전, 그때 어펜드가 됨. 키 값들은 바뀌지 않아야 함.
      "무저건 소팅이 되어 있어야 하며, 다음값을 체크함.
      APPEND GS_MDATA TO GT_MDATA.
      CLEAR  GS_MDATA.
    ENDAT.

  ENDLOOP.

  CLEAR GT_INTERN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_MDISPLAY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_MDISPLAY .

  LOOP AT GT_MDATA INTO GS_MDATA.

    MOVE-CORRESPONDING GS_MDATA TO GT_MDISPLAY.
    APPEND GT_MDISPLAY.

    CLEAR GT_MDISPLAY.

  ENDLOOP.

  LOOP AT GT_MDISPLAY.
    IF GT_MDISPLAY-MNUMB IS INITIAL.
      GT_MDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_MDISPLAY-MNAME IS INITIAL.
      GT_MDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_MDISPLAY-MUNIT IS INITIAL.
      GT_MDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_MDISPLAY-MLENG IS INITIAL.
      GT_MDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_MDISPLAY-MHGHT IS INITIAL.
      GT_MDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_MDISPLAY-MSTAN IS INITIAL.
      GT_MDISPLAY-ICON = ICON_LED_RED.
    ELSE.
      GT_MDISPLAY-ICON = ICON_LED_YELLOW.
    ENDIF.

    MODIFY GT_MDISPLAY[] FROM GT_MDISPLAY.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_INSTANCE_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_INSTANCE_0100 .

  CREATE OBJECT GR_CON1 "
    EXPORTING
      CONTAINER_NAME = GV_CONTAINER. "

  CREATE OBJECT GR_GRID1 "그리드 만들기
    EXPORTING
      I_PARENT = GR_CON1. " 그리드는 항상 컨테이너 위에 올라감. 업어주는 형상.
  "컨테이너
  "그리드가 자식 클래스

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_LAYOUT_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_LAYOUT_0100 .

*  GS_LAYOUT-EDIT_MODE  = ABAP_TRUE. "편집모드
  GS_LAYOUT-ZEBRA      = ABAP_TRUE.  "줄무늬를 줌. 얼룩말
  GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.  "최적화, 필드캣이랑 똑같음.
*  GS_LAYOUT-SEL_MODE   = 'A'.     "B:단일,C:복수,D:셀,A:행/열
*                                                  "B를 주면 단일라인씩 선택 가능
*                                                  "C 복수라인 선택가능, 스크롤
* "                  D 한 셀단위로 선택 가능. 박스버튼이 생기고  라인을 선택하는 기능 생성
*                      "A 행과열 생김.
*  GS_LAYOUT-NO_ROWMARK = SPACE. "한줄 선택 없애주는 기능.
* "SEL모드랑 로우마크랑 연관이 있음,
*
*  GS_LAYOUT-KEYHOT = 'X'. "키 필드 누를 수 있음
*  GS_LAYOUT-NO_HEADERS = SPACE. "페이지 245
*  GS_LAYOUT-INFO_FNAME = 'LCOLOR'.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_GRID_EXCLUDE_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SET_GRID_EXCLUDE_0100 .

  DATA: LS_EXCLUDE LIKE LINE OF GT_EXCLUDE.
  REFRESH: GT_EXCLUDE.

  "-- DEFINE _SET_EX
  DEFINE _SET_EX.
    CLEAR: LS_EXCLUDE.
    LS_EXCLUDE = &1.
    APPEND LS_EXCLUDE TO GT_EXCLUDE.
  END-OF-DEFINITION.

  _SET_EX:
*   CL_GUI_ALV_GRID=>MC_FC_FIND,
   CL_GUI_ALV_GRID=>MC_FC_SORT_ASC,
   CL_GUI_ALV_GRID=>MC_FC_SORT_DSC,
*   CL_GUI_ALV_GRID=>MC_MB_SUBTOT,
*   CL_GUI_ALV_GRID=>MC_MB_SUM,
*
    CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW,
    CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW,
    CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW,
    CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW,
    CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW,
*    CL_GUI_ALV_GRID=>MC_FC_LOC_COPY,
*    CL_GUI_ALV_GRID=>MC_FC_LOC_CUT,
*    CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE,
    CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW,
    CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO,
    CL_GUI_ALV_GRID=>MC_FC_CHECK,

*   CL_GUI_ALV_GRID=>MC_FC_DETAIL,
*   CL_GUI_ALV_GRID=>MC_FC_FILTER,
    CL_GUI_ALV_GRID=>MC_FC_GRAPH,
*    CL_GUI_ALV_GRID=>MC_FC_HTML,
    CL_GUI_ALV_GRID=>MC_FC_INFO,
    CL_GUI_ALV_GRID=>MC_FC_REFRESH,

*   CL_GUI_ALV_GRID=>MC_FC_VIEWS,
*   CL_GUI_ALV_GRID=>MC_FC_LOAD_VARIANT,
*   CL_GUI_ALV_GRID=>MC_FC_PRINT,
*   CL_GUI_ALV_GRID=>MC_MB_VARIANT,
*   CL_GUI_ALV_GRID=>MC_MB_EXPORT,

    CL_GUI_ALV_GRID=>MC_FC_VIEW_CRYSTAL,
    CL_GUI_ALV_GRID=>MC_FC_VIEW_EXCEL,
    CL_GUI_ALV_GRID=>MC_FC_VIEW_GRID,
    CL_GUI_ALV_GRID=>MC_FC_VIEW_LOTUS,
    CL_GUI_ALV_GRID=>MC_FC_EXPCRDATA,
    CL_GUI_ALV_GRID=>MC_FC_EXPCRDESIG,
    CL_GUI_ALV_GRID=>MC_FC_EXPCRTEMPL,
    CL_GUI_ALV_GRID=>MC_FC_CALL_ABC,
    CL_GUI_ALV_GRID=>MC_FC_CALL_CRBATCH.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form APPEND_FIELDCAT_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM APPEND_FIELDCAT_0100 .

  DATA: LV_DYNNR TYPE SY-DYNNR.
  LV_DYNNR = SY-DYNNR.

  "-- field catalog data
  "   field catalog merge or set fieldcatalog를 사용할 수 있음.

  "{ FIELDCATLOG MERGE 사용
  PERFORM GET_FIELDCATLOG_DATA USING LV_DYNNR.

  PERFORM MODIFY_FIELDCATLOG_DATA.
  "}

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_FIELDCATLOG_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LV_DYNNR
*&---------------------------------------------------------------------*
FORM GET_FIELDCATLOG_DATA  USING P_DYNNR..


  DATA: LT_FIELDCAT TYPE KKBLO_T_FIELDCAT. "
  DATA: LV_TABNAME  TYPE DD02L-TABNAME.


  IF P_MATER EQ ABAP_TRUE.
    LV_TABNAME = 'GT_MDISPLAY'.
  ELSEIF P_HOUSE EQ ABAP_TRUE.
    LV_TABNAME = 'GT_HDISPLAY'.
  ELSEIF P_BOM EQ ABAP_TRUE.
    LV_TABNAME = 'GT_BDISPLAY'.
  ELSEIF P_INSTAL EQ ABAP_TRUE.
    LV_TABNAME = 'GT_IDISPLAY'.
  ENDIF.


  CALL FUNCTION 'K_KKB_FIELDCAT_MERGE' "
    EXPORTING
      I_CALLBACK_PROGRAM     = SY-REPID "
      I_TABNAME              = LV_TABNAME "
    " I_STRUCNAME            = 'ZEDU20_EX0ST' "ABAP DIC. 정의된 STRUCTURE
      I_BYPASSING_BUFFER     = ABAP_TRUE "버퍼에 올림. 필드가 바뀌면 갱신하기 위해서
      I_INCLNAME             = SY-REPID ""
    CHANGING
      CT_FIELDCAT            = LT_FIELDCAT[]
    EXCEPTIONS
      INCONSISTENT_INTERFACE = 1
      OTHERS                 = 2.

  IF SY-SUBRC EQ 0.

    "-- Trasnfer LVC.
    CALL FUNCTION 'LVC_TRANSFER_FROM_KKBLO' "
      EXPORTING
        IT_FIELDCAT_KKBLO = LT_FIELDCAT[]
      IMPORTING
        ET_FIELDCAT_LVC   = GT_FIELDCAT[] "AVL 타입으로 컨버전을 하는 것..
      EXCEPTIONS
        IT_DATA_MISSING   = 1.
  ELSE.

    " Error Fieldcatalog merge!!
    MESSAGE E000 WITH 'Error Fieldcatalog merge!!'.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY_FIELDCATLOG_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY_FIELDCATLOG_DATA .

  DATA:  LV_TEXT(50).

  "--- Change Fieldcat.
  LOOP AT GT_FIELDCAT INTO GS_FIELDCAT.
    CLEAR: LV_TEXT.

    "-- Change fieldcat Attribute
    CASE GS_FIELDCAT-FIELDNAME.
      WHEN 'CHECK'.
*        LV_TEXT = TEXT-F01.
        GS_FIELDCAT-CHECKBOX = 'X'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
*        GS_FIELDCAT-KEY = 'X'.
      WHEN 'ICON'.
        LV_TEXT = TEXT-F01.
      WHEN 'MNAME'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'MUNIT'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'MHGHT'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'MLENG'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'MSTAN'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN OTHERS.
*        GS_FIELDCAT-NO_OUT = ABAP_TRUE.
    ENDCASE.
    "Column Optimizer
    GS_FIELDCAT-COL_OPT = ABAP_TRUE.

    "-- Common attribute
    IF LV_TEXT IS NOT INITIAL.
      GS_FIELDCAT-COLTEXT   = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_L = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_M = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_S = LV_TEXT.
    ENDIF.

    MODIFY GT_FIELDCAT FROM GS_FIELDCAT.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form REGIST_ALV_EVENT_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GR_GRID1
*&---------------------------------------------------------------------*
FORM REGIST_ALV_EVENT_0100 USING PR_GRID TYPE REF TO CL_GUI_ALV_GRID.

* REGISTER EVENT
  CALL METHOD PR_GRID->REGISTER_EDIT_EVENT
  "이벤트를 등록한다. 실제로 그리드가 받음.
    EXPORTING
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.
  "이벤트를 받는 공간이 생김.
  "
*  CALL METHOD PR_GRID->SET_READY_FOR_INPUT
*    EXPORTING
*      I_READY_FOR_INPUT = 1.

*-- GR_EVENT_RECEIVER
  IF GR_EVENT_RECEIVER IS INITIAL.
    CREATE OBJECT GR_EVENT_RECEIVER.
    "우리가 만든 이벤트 리시버 생성됨, 그리드, 컨테이너같은 개념. 이벤트를 받아주는 곳.
  ENDIF.

* Handler Event
  SET HANDLER:
    GR_EVENT_RECEIVER->HANDLE_TOOLBAR   FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED_FINISHED
*      FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_USER_COMMAND  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR ALL INSTANCES,
   GR_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK  FOR ALL INSTANCES.
*    GR_EVENT_RECEIVER->HANDLE_ONF4          FOR ALL INSTANCES.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_GRID_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_ALV_GRID_0100 .

  GS_VARIANT-REPORT = SY-REPID. "현재 프로그램.

  GV_SAVE = 'A'. "ALV의 레이아웃을 어떤식으로 저장할 것이냐.

  "*-- Build field catalog for the alv control
  CALL METHOD GR_GRID1->SET_TABLE_FOR_FIRST_DISPLAY "
  "그리드를 스크린에 불러옴.
    EXPORTING
      I_DEFAULT                     = ABAP_TRUE
      IS_LAYOUT                     = GS_LAYOUT
      IS_VARIANT                    = GS_VARIANT
      I_SAVE                        = GV_SAVE
      IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE " 기능버튼을 뺄때.
    CHANGING
      IT_FIELDCATALOG               = GT_FIELDCAT "
      IT_SORT                       = GT_SORT
      IT_OUTTAB                     = GT_MDISPLAY[]
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3.

  IF SY-SUBRC NE 0.
    MESSAGE E000(0K) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_GRID_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM REFRESH_GRID_0100 .

  GS_STABLE-ROW = ABAP_TRUE. "Row
  GS_STABLE-COL = ABAP_TRUE. "column

  CALL METHOD GR_GRID1->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD GR_GRID1->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_STABLE
      I_SOFT_REFRESH = 'X'.

  CALL METHOD CL_GUI_CFW=>FLUSH.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY_INFO
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY_INFO .

  IF A_MNAME IS INITIAL.
    A_MNAME = B_MNAME.
  ENDIF.

  IF A_MUNIT IS INITIAL.
    A_MUNIT = B_MUNIT.
  ENDIF.

  IF A_MLENG IS INITIAL.
    A_MLENG = B_MLENG.
  ENDIF.

  IF A_MHGHT IS INITIAL.
    A_MHGHT = B_MHGHT.
  ENDIF.

  IF A_MSTAN IS INITIAL.
    A_MSTAN = B_MSTAN.
  ENDIF.

  GT_MDISPLAY-MNAME = A_MNAME.
  GT_MDISPLAY-MUNIT = A_MUNIT.
  GT_MDISPLAY-MLENG = A_MLENG.
  GT_MDISPLAY-MHGHT = A_MHGHT.
  GT_MDISPLAY-MSTAN = A_MSTAN.

  IF GT_MDISPLAY-MNUMB IS INITIAL.
    GT_MDISPLAY-ICON = ICON_LED_RED.
  ELSEIF  GT_MDISPLAY-MNAME IS INITIAL.
    GT_MDISPLAY-ICON = ICON_LED_RED.
  ELSEIF  GT_MDISPLAY-MUNIT IS INITIAL.
    GT_MDISPLAY-ICON = ICON_LED_RED.
  ELSEIF  GT_MDISPLAY-MLENG IS INITIAL.
    GT_MDISPLAY-ICON = ICON_LED_RED.
  ELSEIF  GT_MDISPLAY-MHGHT IS INITIAL.
    GT_MDISPLAY-ICON = ICON_LED_RED.
  ELSEIF  GT_MDISPLAY-MSTAN IS INITIAL.
    GT_MDISPLAY-ICON = ICON_LED_RED.
  ELSE.
    GT_MDISPLAY-ICON = ICON_LED_YELLOW.
  ENDIF.

  MODIFY GT_MDISPLAY[] FROM GT_MDISPLAY.

  CLEAR: A_MNAME, A_MUNIT, A_MLENG, A_MHGHT, A_MSTAN.

  MESSAGE S021.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form H_EXCEL_UPLOAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM H_EXCEL_UPLOAD .

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE' "엑셀의 내용을 가져오는 펑션
    EXPORTING
      FILENAME                = P_HLOAD
      I_BEGIN_COL             = 1         "Excel file start col     "엑셀은 컬럼과 로우로 되어 있음.
      I_BEGIN_ROW             = 2         "Excel file start row  " 시작하는 세로값, 첫번째는 필드가 나오기 때문에
      I_END_COL               = 100                                       "오른쪽으로 100번째 까지
      I_END_ROW               = 50000                                 "세로로 50000번째 까지 가져옴.
    TABLES
      INTERN                  = GT_INTERN                            "엑셀에서 읽은 데이터를 인터널 테이블로 가져옴
      "ROW COL VALUE식으로 이루어져 있음. 값은 읽는 형태
    EXCEPTIONS
      INCONSISTENT_PARAMETERS = 1 "0이 아닌 값들을 정의 예외처리
      UPLOAD_OLE              = 2
      OTHERS                  = 3.

  IF P_HLOAD ='C:\'. "가져온 개수가 0이냐? 데이터가 없냐?
    MESSAGE S012 DISPLAY LIKE 'E'. " 만들어진 데이터가 없음.
    GV_ERROR = ABAP_TRUE. " 에러라고 찍어줌
    EXIT.
  ENDIF.


*  IF SY-SUBRC <> 0. "not equel
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*  "스텐다드 메세지, 굳이 없어도 됨.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form HOUSE_EXCEL_TO_ITAB
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM HOUSE_EXCEL_TO_ITAB .

  FIELD-SYMBOLS: <FS_COL>.

  CLEAR: GS_HDATA, GT_HDATA.

  LOOP AT GT_INTERN.

*    ADD 1 TO GT_INTERN-COL.

    ASSIGN COMPONENT GT_INTERN-COL OF STRUCTURE "INTERN-COL 필드의 순서를 의미함. GT_DATA의 1, 2, 3, 4번째  필드
                                   GS_HDATA TO <FS_COL>. "

    <FS_COL> = GT_INTERN-VALUE.
    "t_data-zyear = GT_INTERN-VALUE. 컬럼값이 2가 됨.

    AT END OF ROW. "ROW라는 필드가 끝날 때(반복되는 것이 끝날 때) 로우의 값이 바뀌기 전, 그때 어펜드가 됨. 키 값들은 바뀌지 않아야 함.
      "무저건 소팅이 되어 있어야 하며, 다음값을 체크함.
      APPEND GS_HDATA TO GT_HDATA.
      CLEAR  GS_HDATA.
    ENDAT.

  ENDLOOP.

  CLEAR GT_INTERN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_HDISPLAY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_HDISPLAY .

  LOOP AT GT_HDATA INTO GS_HDATA.

    MOVE-CORRESPONDING GS_HDATA TO GT_HDISPLAY.
    APPEND GT_HDISPLAY.

    CLEAR GT_HDISPLAY.

  ENDLOOP.

  LOOP AT GT_HDISPLAY.
    IF GT_HDISPLAY-HCODE IS INITIAL.
      GT_HDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_HDISPLAY-MAHCA IS INITIAL.
      GT_HDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_HDISPLAY-SUHCA IS INITIAL.
      GT_HDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_HDISPLAY-HSIZE IS INITIAL.
      GT_HDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_HDISPLAY-HNAME IS INITIAL.
    ELSE.
      GT_HDISPLAY-ICON = ICON_LED_YELLOW.
    ENDIF.

    MODIFY GT_HDISPLAY[] FROM GT_HDISPLAY.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Module ALV_INIT_DISPLAY_0200 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE ALV_INIT_DISPLAY_0200 OUTPUT.
  "-- 화면의  GRID가 BOUND되었는지 확인한다.
  IF GR_GRID2 IS NOT BOUND. "바운드 - 생성이 되었냐 안되었냐

    "-- GRID의 INSTANCE를 생성한다.
    PERFORM CREATE_INSTANCE_0200.
*
*    "-- GRID의 LAYOUT 속성을 정의한다.
    PERFORM INIT_LAYOUT_0200.
*
*    "-- ALV Standard toolbar button cotrol
    PERFORM SET_GRID_EXCLUDE_0100.
*
*    "-- ALV Sort
*    PERFORM ALV_SORT_0100.
*
*    "-- Field Attribute을 사용자의 요구사항에 맞게 변경
    PERFORM APPEND_FIELDCAT_0200.
*
*    "-- ALV Events 등록
    PERFORM REGIST_ALV_EVENT_0200 USING GR_GRID2.
*
*    "-- ALV Display
    PERFORM DISPLAY_ALV_GRID_0200.

*    "-- ALV Title
*    PERFORM DISPLAY_ALV_TITLE_0100.

  ELSE.

    "-- ALV Refresh
    PERFORM REFRESH_GRID_0200.

  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Module STATUS_0200 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.
  SET PF-STATUS 'PF_0200'.
  SET TITLEBAR 'T_0200'.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form INIT_LAYOUT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_LAYOUT_0200 .

*  GS_LAYOUT-EDIT_MODE  = ABAP_TRUE. "편집모드
  GS_LAYOUT-ZEBRA      = ABAP_TRUE.  "줄무늬를 줌. 얼룩말
  GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.  "최적화, 필드캣이랑 똑같음.
*  GS_LAYOUT-SEL_MODE   = 'A'.     "B:단일,C:복수,D:셀,A:행/열
*                                                  "B를 주면 단일라인씩 선택 가능
*                                                  "C 복수라인 선택가능, 스크롤
* "                  D 한 셀단위로 선택 가능. 박스버튼이 생기고  라인을 선택하는 기능 생성
*                      "A 행과열 생김.
*  GS_LAYOUT-NO_ROWMARK = SPACE. "한줄 선택 없애주는 기능.
* "SEL모드랑 로우마크랑 연관이 있음,
*
*  GS_LAYOUT-KEYHOT = 'X'. "키 필드 누를 수 있음
*  GS_LAYOUT-NO_HEADERS = SPACE. "페이지 245
*  GS_LAYOUT-INFO_FNAME = 'LCOLOR'.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form APPEND_FIELDCAT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM APPEND_FIELDCAT_0200 .

  DATA: LV_DYNNR TYPE SY-DYNNR.
  LV_DYNNR = SY-DYNNR.

  "-- field catalog data
  "   field catalog merge or set fieldcatalog를 사용할 수 있음.

  "{ FIELDCATLOG MERGE 사용
  PERFORM GET_FIELDCATLOG_DATA USING LV_DYNNR.

  PERFORM MODIFY_FIELDCATLOG_DATA2.
  "}

ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY_FIELDCATLOG_DATA2
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY_FIELDCATLOG_DATA2 .

  DATA:  LV_TEXT(50).

  "--- Change Fieldcat.
  LOOP AT GT_FIELDCAT INTO GS_FIELDCAT.
    CLEAR: LV_TEXT.

    "-- Change fieldcat Attribute
    CASE GS_FIELDCAT-FIELDNAME.
      WHEN 'CHECK'.
*        LV_TEXT = TEXT-F01.
        GS_FIELDCAT-CHECKBOX = 'X'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
*        GS_FIELDCAT-KEY = 'X'.
      WHEN 'ICON'.
        LV_TEXT = TEXT-F01.

      WHEN OTHERS.
*        GS_FIELDCAT-NO_OUT = ABAP_TRUE.
    ENDCASE.
    "Column Optimizer
    GS_FIELDCAT-COL_OPT = ABAP_TRUE.

    "-- Common attribute
    IF LV_TEXT IS NOT INITIAL.
      GS_FIELDCAT-COLTEXT   = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_L = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_M = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_S = LV_TEXT.
    ENDIF.

    MODIFY GT_FIELDCAT FROM GS_FIELDCAT.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form REGIST_ALV_EVENT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GR_GRID2
*&---------------------------------------------------------------------*
FORM REGIST_ALV_EVENT_0200 USING PR_GRID TYPE REF TO CL_GUI_ALV_GRID.

* REGISTER EVENT
  CALL METHOD PR_GRID->REGISTER_EDIT_EVENT
  "이벤트를 등록한다. 실제로 그리드가 받음.
    EXPORTING
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.
  "이벤트를 받는 공간이 생김.
  "
*  CALL METHOD PR_GRID->SET_READY_FOR_INPUT
*    EXPORTING
*      I_READY_FOR_INPUT = 1.

*-- GR_EVENT_RECEIVER
  IF GR_EVENT_RECEIVER IS INITIAL.
    CREATE OBJECT GR_EVENT_RECEIVER.
    "우리가 만든 이벤트 리시버 생성됨, 그리드, 컨테이너같은 개념. 이벤트를 받아주는 곳.
  ENDIF.

* Handler Event
  SET HANDLER:
    GR_EVENT_RECEIVER->HANDLE_TOOLBAR   FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED_FINISHED
*      FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_USER_COMMAND  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR ALL INSTANCES,
   GR_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK  FOR ALL INSTANCES.
*    GR_EVENT_RECEIVER->HANDLE_ONF4          FOR ALL INSTANCES.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_GRID_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_ALV_GRID_0200 .

  GS_VARIANT-REPORT = SY-REPID. "현재 프로그램.

  GV_SAVE = 'A'. "ALV의 레이아웃을 어떤식으로 저장할 것이냐.

  "*-- Build field catalog for the alv control
  CALL METHOD GR_GRID2->SET_TABLE_FOR_FIRST_DISPLAY "
  "그리드를 스크린에 불러옴.
    EXPORTING
      I_DEFAULT                     = ABAP_TRUE
      IS_LAYOUT                     = GS_LAYOUT
      IS_VARIANT                    = GS_VARIANT
      I_SAVE                        = GV_SAVE
      IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE " 기능버튼을 뺄때.
    CHANGING
      IT_FIELDCATALOG               = GT_FIELDCAT "
      IT_SORT                       = GT_SORT
      IT_OUTTAB                     = GT_HDISPLAY[]
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3.

  IF SY-SUBRC NE 0.
    MESSAGE E000(0K) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_GRID_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM REFRESH_GRID_0200 .

  GS_STABLE-ROW = ABAP_TRUE. "Row
  GS_STABLE-COL = ABAP_TRUE. "column

  CALL METHOD GR_GRID2->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD GR_GRID2->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_STABLE
      I_SOFT_REFRESH = 'X'.

  CALL METHOD CL_GUI_CFW=>FLUSH.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form B_EXCEL_UPLOAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM B_EXCEL_UPLOAD .

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE' "엑셀의 내용을 가져오는 펑션
    EXPORTING
      FILENAME                = P_BLOAD
      I_BEGIN_COL             = 1         "Excel file start col     "엑셀은 컬럼과 로우로 되어 있음.
      I_BEGIN_ROW             = 2         "Excel file start row  " 시작하는 세로값, 첫번째는 필드가 나오기 때문에
      I_END_COL               = 100                                       "오른쪽으로 100번째 까지
      I_END_ROW               = 50000                                 "세로로 50000번째 까지 가져옴.
    TABLES
      INTERN                  = GT_INTERN                            "엑셀에서 읽은 데이터를 인터널 테이블로 가져옴
      "ROW COL VALUE식으로 이루어져 있음. 값은 읽는 형태
    EXCEPTIONS
      INCONSISTENT_PARAMETERS = 1 "0이 아닌 값들을 정의 예외처리
      UPLOAD_OLE              = 2
      OTHERS                  = 3.

  IF P_BLOAD ='C:\'. "가져온 개수가 0이냐? 데이터가 없냐?
    MESSAGE S012 DISPLAY LIKE 'E'. " 만들어진 데이터가 없음.
    GV_ERROR = ABAP_TRUE. " 에러라고 찍어줌
    EXIT.
  ENDIF.


*  IF SY-SUBRC <> 0. "not equel
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*  "스텐다드 메세지, 굳이 없어도 됨.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form BOM_EXCEL_TO_ITAB
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM BOM_EXCEL_TO_ITAB .

  FIELD-SYMBOLS: <FS_COL>.

  CLEAR: GS_BDATA, GT_BDATA.

  LOOP AT GT_INTERN.

*    ADD 1 TO GT_INTERN-COL.

    ASSIGN COMPONENT GT_INTERN-COL OF STRUCTURE "INTERN-COL 필드의 순서를 의미함. GT_DATA의 1, 2, 3, 4번째  필드
                                   GS_BDATA TO <FS_COL>. "

    <FS_COL> = GT_INTERN-VALUE.
    "t_data-zyear = GT_INTERN-VALUE. 컬럼값이 2가 됨.

    AT END OF ROW. "ROW라는 필드가 끝날 때(반복되는 것이 끝날 때) 로우의 값이 바뀌기 전, 그때 어펜드가 됨. 키 값들은 바뀌지 않아야 함.
      "무저건 소팅이 되어 있어야 하며, 다음값을 체크함.
      APPEND GS_BDATA TO GT_BDATA.
      CLEAR  GS_BDATA.
    ENDAT.

  ENDLOOP.

  CLEAR GT_INTERN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_BDISPLAY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_BDISPLAY .

  LOOP AT GT_BDATA INTO GS_BDATA.

    MOVE-CORRESPONDING GS_BDATA TO GT_BDISPLAY.
    APPEND GT_BDISPLAY.

    CLEAR GT_BDISPLAY.

  ENDLOOP.

  LOOP AT GT_BDISPLAY.
    IF GT_BDISPLAY-HCODE IS INITIAL.
      GT_BDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_BDISPLAY-HCNUM IS INITIAL.
      GT_BDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_BDISPLAY-MNUMB IS INITIAL.
      GT_BDISPLAY-ICON = ICON_LED_RED.
    ELSEIF  GT_BDISPLAY-REQMT IS INITIAL.
      GT_BDISPLAY-ICON = ICON_LED_RED.
    ELSE.
      GT_BDISPLAY-ICON = ICON_LED_YELLOW.
    ENDIF.

    MODIFY GT_BDISPLAY[] FROM GT_BDISPLAY.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_INSTANCE_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_INSTANCE_0300 .

  CREATE OBJECT GR_CON3 "
    EXPORTING
      CONTAINER_NAME = GV_CONTAINER3. "

  CREATE OBJECT GR_GRID3 "그리드 만들기
    EXPORTING
      I_PARENT = GR_CON3. " 그리드는 항상 컨테이너 위에 올라감. 업어주는 형상.
  "컨테이너
  "그리드가 자식 클래스

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_LAYOUT_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_LAYOUT_0300 .

*  GS_LAYOUT-EDIT_MODE  = ABAP_TRUE. "편집모드
  GS_LAYOUT-ZEBRA      = ABAP_TRUE.  "줄무늬를 줌. 얼룩말
  GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.  "최적화, 필드캣이랑 똑같음.
*  GS_LAYOUT-SEL_MODE   = 'A'.     "B:단일,C:복수,D:셀,A:행/열
*                                                  "B를 주면 단일라인씩 선택 가능
*                                                  "C 복수라인 선택가능, 스크롤
* "                  D 한 셀단위로 선택 가능. 박스버튼이 생기고  라인을 선택하는 기능 생성
*                      "A 행과열 생김.
*  GS_LAYOUT-NO_ROWMARK = SPACE. "한줄 선택 없애주는 기능.
* "SEL모드랑 로우마크랑 연관이 있음,
*
*  GS_LAYOUT-KEYHOT = 'X'. "키 필드 누를 수 있음
*  GS_LAYOUT-NO_HEADERS = SPACE. "페이지 245
*  GS_LAYOUT-INFO_FNAME = 'LCOLOR'.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_GRID_EXCLUDE_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SET_GRID_EXCLUDE_0300 .

ENDFORM.
*&---------------------------------------------------------------------*
*& Form APPEND_FIELDCAT_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM APPEND_FIELDCAT_0300 .

  DATA: LV_DYNNR TYPE SY-DYNNR.
  LV_DYNNR = SY-DYNNR.

  "-- field catalog data
  "   field catalog merge or set fieldcatalog를 사용할 수 있음.

  "{ FIELDCATLOG MERGE 사용
  PERFORM GET_FIELDCATLOG_DATA USING LV_DYNNR.

  PERFORM MODIFY_FIELDCATLOG_DATA3.
  "}

ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY_FIELDCATLOG_DATA3
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY_FIELDCATLOG_DATA3 .

  DATA:  LV_TEXT(50).

  "--- Change Fieldcat.
  LOOP AT GT_FIELDCAT INTO GS_FIELDCAT.
    CLEAR: LV_TEXT.

    "-- Change fieldcat Attribute
    CASE GS_FIELDCAT-FIELDNAME.
      WHEN 'CHECK'.
*        LV_TEXT = TEXT-F01.
        GS_FIELDCAT-CHECKBOX = 'X'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
*        GS_FIELDCAT-KEY = 'X'.
      WHEN 'ICON'.
        LV_TEXT = TEXT-F01.
      WHEN 'MNUMB'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'REQMT'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN OTHERS.
*        GS_FIELDCAT-NO_OUT = ABAP_TRUE.
    ENDCASE.
    "Column Optimizer
    GS_FIELDCAT-COL_OPT = ABAP_TRUE.

    "-- Common attribute
    IF LV_TEXT IS NOT INITIAL.
      GS_FIELDCAT-COLTEXT   = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_L = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_M = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_S = LV_TEXT.
    ENDIF.

    MODIFY GT_FIELDCAT FROM GS_FIELDCAT.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REGIST_ALV_EVENT_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GR_GRID3
*&---------------------------------------------------------------------*
FORM REGIST_ALV_EVENT_0300 USING PR_GRID TYPE REF TO CL_GUI_ALV_GRID.

* REGISTER EVENT
  CALL METHOD PR_GRID->REGISTER_EDIT_EVENT
  "이벤트를 등록한다. 실제로 그리드가 받음.
    EXPORTING
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.
  "이벤트를 받는 공간이 생김.
  "
*  CALL METHOD PR_GRID->SET_READY_FOR_INPUT
*    EXPORTING
*      I_READY_FOR_INPUT = 1.

*-- GR_EVENT_RECEIVER
  IF GR_EVENT_RECEIVER IS INITIAL.
    CREATE OBJECT GR_EVENT_RECEIVER.
    "우리가 만든 이벤트 리시버 생성됨, 그리드, 컨테이너같은 개념. 이벤트를 받아주는 곳.
  ENDIF.

* Handler Event
  SET HANDLER:
    GR_EVENT_RECEIVER->HANDLE_TOOLBAR   FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED_FINISHED
*      FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_USER_COMMAND  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR ALL INSTANCES,
   GR_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK  FOR ALL INSTANCES.
*    GR_EVENT_RECEIVER->HANDLE_ONF4          FOR ALL INSTANCES.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_GRID_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_ALV_GRID_0300 .

  GS_VARIANT-REPORT = SY-REPID. "현재 프로그램.

  GV_SAVE = 'A'. "ALV의 레이아웃을 어떤식으로 저장할 것이냐.

  "*-- Build field catalog for the alv control
  CALL METHOD GR_GRID3->SET_TABLE_FOR_FIRST_DISPLAY "
  "그리드를 스크린에 불러옴.
    EXPORTING
      I_DEFAULT                     = ABAP_TRUE
      IS_LAYOUT                     = GS_LAYOUT
      IS_VARIANT                    = GS_VARIANT
      I_SAVE                        = GV_SAVE
      IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE " 기능버튼을 뺄때.
    CHANGING
      IT_FIELDCATALOG               = GT_FIELDCAT "
      IT_SORT                       = GT_SORT
      IT_OUTTAB                     = GT_BDISPLAY[]
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3.

  IF SY-SUBRC NE 0.
    MESSAGE E000(0K) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_GRID_0300
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM REFRESH_GRID_0300 .

  GS_STABLE-ROW = ABAP_TRUE. "Row
  GS_STABLE-COL = ABAP_TRUE. "column

  CALL METHOD GR_GRID3->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD GR_GRID3->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_STABLE
      I_SOFT_REFRESH = 'X'.

  CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form EVENT_DATA_CHANGED
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM EVENT_DATA_CHANGED
      USING PR_DATA_CHANGED  TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL
            PV_ONF4          TYPE CHAR01
            PV_ONF4_BEFORE   TYPE CHAR01
            PV_ONF4_AFTER    TYPE CHAR01
            PV_UCOMM         TYPE SY-UCOMM
            PR_SENDER        TYPE REF TO CL_GUI_ALV_GRID.

** - PREFIX 정의 - FORM PARAMETER
**   1. PT_  : Internal Table or Ranges
**   2. PS_  : Structure
**   3. PV_  : Variables
**   4. PR_  : Reference Variables
*
  DATA: LV_MSGID TYPE SYMSGID,
        LV_MSGTY TYPE SYMSGTY,
        LV_MSGNO TYPE SYMSGNO,
        LV_TYPE  TYPE DD01V-DATATYPE.
*
**--- Begin or Example
  DATA: LS_MOD_CELLS TYPE LVC_S_MODI,
        LS_INS_CELLS TYPE LVC_S_MOCE,
        LS_DEL_CELLS TYPE LVC_S_MOCE.

  DATA: LV_TABIX  TYPE SY-TABIX.    "row 변경 체크

  DEFINE _MODIFY_CELL.
    CALL METHOD PR_DATA_CHANGED->MODIFY_CELL
      EXPORTING
        I_FIELDNAME = &1
        I_ROW_ID    = &2
        I_VALUE     = &3.

  END-OF-DEFINITION.

  DEFINE _GET_CELL_VALUE.
    CALL METHOD PR_DATA_CHANGED->GET_CELL_VALUE
      EXPORTING
        I_FIELDNAME = &1
        I_ROW_ID    = &2
      IMPORTING
        E_VALUE     = &3.
  END-OF-DEFINITION.
*
  DEFINE _ADD_PROTOCOL.
    CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
      EXPORTING
        I_FIELDNAME = &1
        I_ROW_ID    = &2
        I_MSGID     = 'ZMFI'
        I_MSGTY     = &3
        I_MSGNO     = &4
        I_MSGV1     = &5
        I_MSGV2     = &6
        I_MSGV3     = &7
        I_MSGV4     = &8.
  END-OF-DEFINITION.
*
  DEFINE _MODIFY_STYLE.
    CALL METHOD PR_DATA_CHANGED->MODIFY_STYLE
      EXPORTING
        I_FIELDNAME = &1
        I_ROW_ID    = &2
        I_STYLE     = &3.
  END-OF-DEFINITION.
**--- End of Example

  CASE PR_SENDER.
    WHEN GR_GRID3.
      LOOP AT PR_DATA_CHANGED->MT_MOD_CELLS INTO LS_MOD_CELLS.

        CASE LS_MOD_CELLS-FIELDNAME.
*          날짜
          WHEN 'MNUMB'.

            READ TABLE GT_BDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_BDISPLAY-MNUMB = LS_MOD_CELLS-VALUE.

              IF GT_BDISPLAY-MNUMB IS NOT INITIAL
                AND GT_BDISPLAY-HCODE IS NOT INITIAL
                AND GT_BDISPLAY-HCNUM IS NOT INITIAL
                AND GT_BDISPLAY-REQMT IS NOT INITIAL.
                GT_BDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_BDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_BDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0300.

          WHEN 'REQMT'.

            READ TABLE GT_BDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_BDISPLAY-REQMT = LS_MOD_CELLS-VALUE.

              IF GT_BDISPLAY-MNUMB IS NOT INITIAL
              AND GT_BDISPLAY-HCODE IS NOT INITIAL
              AND GT_BDISPLAY-HCNUM IS NOT INITIAL
              AND GT_BDISPLAY-REQMT IS NOT INITIAL.
                GT_BDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_BDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_BDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0300.
        ENDCASE.
      ENDLOOP.

    WHEN GR_GRID1.
      LOOP AT PR_DATA_CHANGED->MT_MOD_CELLS INTO LS_MOD_CELLS.

        CASE LS_MOD_CELLS-FIELDNAME.
*          날짜
          WHEN 'MNAME'.

            READ TABLE GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_MDISPLAY-MNAME = LS_MOD_CELLS-VALUE.

              IF GT_MDISPLAY-MNAME IS NOT INITIAL
              AND GT_MDISPLAY-MHGHT IS NOT INITIAL
              AND GT_MDISPLAY-MLENG IS NOT INITIAL
              AND GT_MDISPLAY-MNUMB IS NOT INITIAL
              AND GT_MDISPLAY-MSTAN IS NOT INITIAL
              AND GT_MDISPLAY-MUNIT IS NOT INITIAL.
                GT_MDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_MDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0100.

          WHEN 'MUNIT'.

            READ TABLE GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_MDISPLAY-MUNIT = LS_MOD_CELLS-VALUE.

              IF GT_MDISPLAY-MNAME IS NOT INITIAL
   AND GT_MDISPLAY-MHGHT IS NOT INITIAL
   AND GT_MDISPLAY-MLENG IS NOT INITIAL
   AND GT_MDISPLAY-MNUMB IS NOT INITIAL
   AND GT_MDISPLAY-MSTAN IS NOT INITIAL
   AND GT_MDISPLAY-MUNIT IS NOT INITIAL.
                GT_MDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_MDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0100.

          WHEN 'MHGHT'.

            READ TABLE GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_MDISPLAY-MHGHT = LS_MOD_CELLS-VALUE.

              IF GT_MDISPLAY-MNAME IS NOT INITIAL
  AND GT_MDISPLAY-MHGHT IS NOT INITIAL
  AND GT_MDISPLAY-MLENG IS NOT INITIAL
  AND GT_MDISPLAY-MNUMB IS NOT INITIAL
  AND GT_MDISPLAY-MSTAN IS NOT INITIAL
  AND GT_MDISPLAY-MUNIT IS NOT INITIAL.
                GT_MDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_MDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0100.

          WHEN 'MLENG'.

            READ TABLE GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_MDISPLAY-MLENG = LS_MOD_CELLS-VALUE.

              IF GT_MDISPLAY-MNAME IS NOT INITIAL
   AND GT_MDISPLAY-MHGHT IS NOT INITIAL
   AND GT_MDISPLAY-MLENG IS NOT INITIAL
   AND GT_MDISPLAY-MNUMB IS NOT INITIAL
   AND GT_MDISPLAY-MSTAN IS NOT INITIAL
   AND GT_MDISPLAY-MUNIT IS NOT INITIAL.
                GT_MDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_MDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0100.

          WHEN 'MSTAN'.

            READ TABLE GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_MDISPLAY-MSTAN = LS_MOD_CELLS-VALUE.

              IF GT_MDISPLAY-MNAME IS NOT INITIAL
  AND GT_MDISPLAY-MHGHT IS NOT INITIAL
  AND GT_MDISPLAY-MLENG IS NOT INITIAL
  AND GT_MDISPLAY-MNUMB IS NOT INITIAL
  AND GT_MDISPLAY-MSTAN IS NOT INITIAL
  AND GT_MDISPLAY-MUNIT IS NOT INITIAL.
                GT_MDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_MDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_MDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0100.
        ENDCASE.
      ENDLOOP.
    WHEN GR_GRID4.
      LOOP AT PR_DATA_CHANGED->MT_MOD_CELLS INTO LS_MOD_CELLS.

        CASE LS_MOD_CELLS-FIELDNAME.
*          날짜
          WHEN 'PROCCD'.

            READ TABLE GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_IDISPLAY-PROCCD = LS_MOD_CELLS-VALUE.

              IF GT_IDISPLAY-HCODE IS NOT INITIAL
              AND GT_IDISPLAY-SEQ IS NOT INITIAL
              AND GT_IDISPLAY-PROCCD IS NOT INITIAL
              AND GT_IDISPLAY-PROSDAY IS NOT INITIAL.
*              AND GT_IDISPLAY-WORK01 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK02 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK03 IS NOT INITIAL.
                GT_IDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_IDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0400.

          WHEN 'PROSDAY'.

            READ TABLE GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
            IF SY-SUBRC EQ 0.
              GT_IDISPLAY-PROSDAY = LS_MOD_CELLS-VALUE.

              IF GT_IDISPLAY-HCODE IS NOT INITIAL
              AND GT_IDISPLAY-SEQ IS NOT INITIAL
              AND GT_IDISPLAY-PROCCD IS NOT INITIAL
              AND GT_IDISPLAY-PROSDAY IS NOT INITIAL.
*              AND GT_IDISPLAY-WORK01 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK02 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK03 IS NOT INITIAL.
                GT_IDISPLAY-ICON = ICON_LED_YELLOW.
              ELSE.
                GT_IDISPLAY-ICON = ICON_LED_RED.
              ENDIF.

              MODIFY GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.

            ENDIF.
            PERFORM REFRESH_GRID_0400.

*          WHEN 'WORK01'.
*
*            READ TABLE GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
*            IF SY-SUBRC EQ 0.
*              GT_IDISPLAY-WORK01 = LS_MOD_CELLS-VALUE.
*
*              IF GT_IDISPLAY-HCODE IS NOT INITIAL
*              AND GT_IDISPLAY-SEQ IS NOT INITIAL
*              AND GT_IDISPLAY-PROCCD IS NOT INITIAL
*              AND GT_IDISPLAY-PRODAY IS NOT INITIAL.
**              AND GT_IDISPLAY-WORK01 IS NOT INITIAL
**              AND GT_IDISPLAY-WORK02 IS NOT INITIAL
**              AND GT_IDISPLAY-WORK03 IS NOT INITIAL.
**                GT_IDISPLAY-ICON = ICON_LED_YELLOW.
*              ELSE.
*                GT_IDISPLAY-ICON = ICON_LED_RED.
*              ENDIF.
*
*              MODIFY GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
*
*            ENDIF.
*            PERFORM REFRESH_GRID_0400.
*
*          WHEN 'WORK02'.
*
*            READ TABLE GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
*            IF SY-SUBRC EQ 0.
*              GT_IDISPLAY-WORK02 = LS_MOD_CELLS-VALUE.
*
*              IF GT_IDISPLAY-HCODE IS NOT INITIAL
*              AND GT_IDISPLAY-SEQ IS NOT INITIAL
*              AND GT_IDISPLAY-PROCCD IS NOT INITIAL
*              AND GT_IDISPLAY-PRODAY IS NOT INITIAL
*              AND GT_IDISPLAY-WORK01 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK02 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK03 IS NOT INITIAL.
*                GT_IDISPLAY-ICON = ICON_LED_YELLOW.
*              ELSE.
*                GT_IDISPLAY-ICON = ICON_LED_RED.
*              ENDIF.
*
*              MODIFY GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
*
*            ENDIF.
*            PERFORM REFRESH_GRID_0400.
*
*          WHEN 'WORK03'.
*
*            READ TABLE GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
*            IF SY-SUBRC EQ 0.
*              GT_IDISPLAY-WORK03 = LS_MOD_CELLS-VALUE.
*
*              IF GT_IDISPLAY-HCODE IS NOT INITIAL
*              AND GT_IDISPLAY-SEQ IS NOT INITIAL
*              AND GT_IDISPLAY-PROCCD IS NOT INITIAL
*              AND GT_IDISPLAY-PRODAY IS NOT INITIAL
*              AND GT_IDISPLAY-WORK01 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK02 IS NOT INITIAL
*              AND GT_IDISPLAY-WORK03 IS NOT INITIAL.
*                GT_IDISPLAY-ICON = ICON_LED_YELLOW.
*              ELSE.
*                GT_IDISPLAY-ICON = ICON_LED_RED.
*              ENDIF.
*
*              MODIFY GT_IDISPLAY INDEX LS_MOD_CELLS-ROW_ID.
*
*            ENDIF.
*            PERFORM REFRESH_GRID_0400.



        ENDCASE.
      ENDLOOP.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form I_EXCEL_UPLOAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM I_EXCEL_UPLOAD .

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE' "엑셀의 내용을 가져오는 펑션
    EXPORTING
      FILENAME                = P_ILOAD
      I_BEGIN_COL             = 1         "Excel file start col     "엑셀은 컬럼과 로우로 되어 있음.
      I_BEGIN_ROW             = 2         "Excel file start row  " 시작하는 세로값, 첫번째는 필드가 나오기 때문에
      I_END_COL               = 100                                       "오른쪽으로 100번째 까지
      I_END_ROW               = 50000                                 "세로로 50000번째 까지 가져옴.
    TABLES
      INTERN                  = GT_INTERN                            "엑셀에서 읽은 데이터를 인터널 테이블로 가져옴
      "ROW COL VALUE식으로 이루어져 있음. 값은 읽는 형태
    EXCEPTIONS
      INCONSISTENT_PARAMETERS = 1 "0이 아닌 값들을 정의 예외처리
      UPLOAD_OLE              = 2
      OTHERS                  = 3.

  IF P_ILOAD ='C:\'. "가져온 개수가 0이냐? 데이터가 없냐?
    MESSAGE S012 DISPLAY LIKE 'E'. " 만들어진 데이터가 없음.
    GV_ERROR = ABAP_TRUE. " 에러라고 찍어줌
    EXIT.
  ENDIF.


*  IF SY-SUBRC <> 0. "not equel
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*  "스텐다드 메세지, 굳이 없어도 됨.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INSTALL_EXCEL_TO_ITAB
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INSTALL_EXCEL_TO_ITAB .

  FIELD-SYMBOLS: <FS_COL>.

  CLEAR: GS_IDATA, GT_IDATA.

  LOOP AT GT_INTERN.

*    ADD 1 TO GT_INTERN-COL.

    ASSIGN COMPONENT GT_INTERN-COL OF STRUCTURE "INTERN-COL 필드의 순서를 의미함. GT_DATA의 1, 2, 3, 4번째  필드
                                   GS_IDATA TO <FS_COL>. "

    <FS_COL> = GT_INTERN-VALUE.
    "t_data-zyear = GT_INTERN-VALUE. 컬럼값이 2가 됨.

    AT END OF ROW. "ROW라는 필드가 끝날 때(반복되는 것이 끝날 때) 로우의 값이 바뀌기 전, 그때 어펜드가 됨. 키 값들은 바뀌지 않아야 함.
      "무저건 소팅이 되어 있어야 하며, 다음값을 체크함.
      APPEND GS_IDATA TO GT_IDATA.
      CLEAR  GS_IDATA.
    ENDAT.

  ENDLOOP.

  CLEAR GT_INTERN.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_INSTANCE_0400
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_INSTANCE_0400 .

  CREATE OBJECT GR_CON4 "
    EXPORTING
      CONTAINER_NAME = GV_CONTAINER4. "

  CREATE OBJECT GR_GRID4 "그리드 만들기
    EXPORTING
      I_PARENT = GR_CON4. " 그리드는 항상 컨테이너 위에 올라감. 업어주는 형상.
  "컨테이너
  "그리드가 자식 클래스

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_LAYOUT_0400
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_LAYOUT_0400 .

*  GS_LAYOUT-EDIT_MODE  = ABAP_TRUE. "편집모드
  GS_LAYOUT-ZEBRA      = ABAP_TRUE.  "줄무늬를 줌. 얼룩말
  GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.  "최적화, 필드캣이랑 똑같음.
*  GS_LAYOUT-SEL_MODE   = 'A'.     "B:단일,C:복수,D:셀,A:행/열
*                                                  "B를 주면 단일라인씩 선택 가능
*                                                  "C 복수라인 선택가능, 스크롤
* "                  D 한 셀단위로 선택 가능. 박스버튼이 생기고  라인을 선택하는 기능 생성
*                      "A 행과열 생김.
*  GS_LAYOUT-NO_ROWMARK = SPACE. "한줄 선택 없애주는 기능.
* "SEL모드랑 로우마크랑 연관이 있음,
*
*  GS_LAYOUT-KEYHOT = 'X'. "키 필드 누를 수 있음
*  GS_LAYOUT-NO_HEADERS = SPACE. "페이지 245
*  GS_LAYOUT-INFO_FNAME = 'LCOLOR'.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form APPEND_FIELDCAT_0400
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM APPEND_FIELDCAT_0400 .

  DATA: LV_DYNNR TYPE SY-DYNNR.
  LV_DYNNR = SY-DYNNR.

  "-- field catalog data
  "   field catalog merge or set fieldcatalog를 사용할 수 있음.

  "{ FIELDCATLOG MERGE 사용
  PERFORM GET_FIELDCATLOG_DATA USING LV_DYNNR.

  PERFORM MODIFY_FIELDCATLOG_DATA4.
  "}

ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY_FIELDCATLOG_DATA4
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY_FIELDCATLOG_DATA4 .

  DATA:  LV_TEXT(50).

  "--- Change Fieldcat.
  LOOP AT GT_FIELDCAT INTO GS_FIELDCAT.
    CLEAR: LV_TEXT.

    "-- Change fieldcat Attribute
    CASE GS_FIELDCAT-FIELDNAME.

      WHEN 'ICON'.
        LV_TEXT = TEXT-F01.
      WHEN 'SEQ'.
        LV_TEXT = TEXT-F05.
      WHEN 'PRODAY'.
        LV_TEXT = TEXT-F06.
      WHEN 'PROCCD'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'PROSDAY'.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'WORK01'.
        LV_TEXT = TEXT-F02.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'WORK02'.
        LV_TEXT = TEXT-F03.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN 'WORK03'.
        LV_TEXT = TEXT-F04.
        GS_FIELDCAT-EDIT = 'X'. "수정가능.
      WHEN OTHERS.
*        GS_FIELDCAT-NO_OUT = ABAP_TRUE.
    ENDCASE.
    "Column Optimizer
    GS_FIELDCAT-COL_OPT = ABAP_TRUE.

    "-- Common attribute
    IF LV_TEXT IS NOT INITIAL.
      GS_FIELDCAT-COLTEXT   = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_L = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_M = LV_TEXT.
      GS_FIELDCAT-SCRTEXT_S = LV_TEXT.
    ENDIF.

    MODIFY GT_FIELDCAT FROM GS_FIELDCAT.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REGIST_ALV_EVENT_0400
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GR_GRID4
*&---------------------------------------------------------------------*
FORM REGIST_ALV_EVENT_0400  USING PR_GRID TYPE REF TO CL_GUI_ALV_GRID.

* REGISTER EVENT
  CALL METHOD PR_GRID->REGISTER_EDIT_EVENT
  "이벤트를 등록한다. 실제로 그리드가 받음.
    EXPORTING
      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.
  "이벤트를 받는 공간이 생김.
  "
*  CALL METHOD PR_GRID->SET_READY_FOR_INPUT
*    EXPORTING
*      I_READY_FOR_INPUT = 1.

*-- GR_EVENT_RECEIVER
  IF GR_EVENT_RECEIVER IS INITIAL.
    CREATE OBJECT GR_EVENT_RECEIVER.
    "우리가 만든 이벤트 리시버 생성됨, 그리드, 컨테이너같은 개념. 이벤트를 받아주는 곳.
  ENDIF.

* Handler Event
  SET HANDLER:
    GR_EVENT_RECEIVER->HANDLE_TOOLBAR   FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_DATA_CHANGED_FINISHED
*      FOR ALL INSTANCES,
    GR_EVENT_RECEIVER->HANDLE_USER_COMMAND  FOR ALL INSTANCES,
*    GR_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR ALL INSTANCES,
   GR_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK  FOR ALL INSTANCES.
*    GR_EVENT_RECEIVER->HANDLE_ONF4          FOR ALL INSTANCES.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_GRID_0400
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM REFRESH_GRID_0400 .

  GS_STABLE-ROW = ABAP_TRUE. "Row
  GS_STABLE-COL = ABAP_TRUE. "column

  CALL METHOD GR_GRID4->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD GR_GRID4->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_STABLE
      I_SOFT_REFRESH = 'X'.

  CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_GRID_0400
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_ALV_GRID_0400 .

  GS_VARIANT-REPORT = SY-REPID. "현재 프로그램.

  GV_SAVE = 'A'. "ALV의 레이아웃을 어떤식으로 저장할 것이냐.

  "*-- Build field catalog for the alv control
  CALL METHOD GR_GRID4->SET_TABLE_FOR_FIRST_DISPLAY "
  "그리드를 스크린에 불러옴.
    EXPORTING
      I_DEFAULT                     = ABAP_TRUE
      IS_LAYOUT                     = GS_LAYOUT
      IS_VARIANT                    = GS_VARIANT
      I_SAVE                        = GV_SAVE
      IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE " 기능버튼을 뺄때.
    CHANGING
      IT_FIELDCATALOG               = GT_FIELDCAT "
      IT_SORT                       = GT_SORT
      IT_OUTTAB                     = GT_IDISPLAY[]
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3.

  IF SY-SUBRC NE 0.
    MESSAGE E000(0K) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

-----------------------------------------------------------
Extracted by Mass Download version1.5.2 - E.G.Mellodew. 1998-2019. Sap Release753
